---
import type { Team } from "../data/leadInfo";
import { sanityClient } from "sanity:client";
import SubLeadCard from "../components/SubLeadCard.astro";
import DirectorCard from "../components/DirectorCard.astro";

const { teamName, teamData } = Astro.props as {
  teamName: string;
  teamData: Team;
};

const oneSubTeam = await sanityClient.fetch(
  `*[_type == "subTeam" && lower(subTeamName) == lower($teamName)][0] {
    subTeamName,
    rank,
    subTeamDirector[] {
      name,
      email,
      year,
      position,
      photo {
        asset->{
          url
        }
      }
    },
    subTeamLeads[] {
      name,
      email,
      year,
      position,
      photo {
        asset->{
          url
        }
      }
    }
  }`,
  { teamName },
);

console.log(JSON.stringify(oneSubTeam, null, 2));
---

<div
  class="about"
  id={`section-${oneSubTeam.subTeamName}`}
  data-team={oneSubTeam.subTeamName}
  style={`background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),
      url(${teamData.backgroundImg.src});`}
>
  <h1 class="title">{oneSubTeam.subTeamName}</h1>
  <div class="bottom">
    <DirectorCard
      imageURL={oneSubTeam.subTeamDirector[0].photo.asset.url}
      name={oneSubTeam.subTeamDirector[0].name}
    />
    <h4 class="team-description">{teamData.description}</h4>
  </div>

  <div class="subteam-grid">
    {
      oneSubTeam.subTeamLeads.map((oneLead: any) => (
        // <div class="one-subteam-lead">
        //   <img class="sub-headshot" src={oneLead.photo.asset.url} />
        //   <h4 class="sub-title">{oneLead.position}</h4>
        //   <h4 class="sub-name">{oneLead.name}</h4>
        // </div>
        <SubLeadCard
          imageURL={oneLead.photo.asset.url}
          name={oneLead.name}
          title={oneLead.position}
        />
      ))
    }
  </div>
</div>
<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const sections: NodeListOf<HTMLElement> =
    document.querySelectorAll("[data-team]");
  sections.forEach((section) => {
    const bottom = section.querySelector<HTMLElement>(".bottom")!;
    const grid = section.querySelector<HTMLElement>(".subteam-grid")!;

    gsap.set(grid, { y: 90, autoAlpha: 0 });

    const timeline = gsap.timeline({
      scrollTrigger: {
        trigger: section,
        start: "top top",
        end: "+=550%",
        scrub: true,
        pin: true,
        id: "main-transition",
      },
    });
    timeline
      .to({}, { duration: 0.3 })
      .to(bottom, { autoAlpha: 0, duration: 0.4 })
      .to({}, { duration: 0.3 })
      .to(grid, { y: 0, autoAlpha: 1, duration: 0.8 }, "-=0.2")
      .to({}, { duration: 0.3 });
  });
</script>

<style>
  .about {
    height: 100vh;
    position: relative;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    padding-top: 10vh;

    /* border-radius: 1px;
    border-style: solid;
    border-color: green; */
  }

  .bottom {
    position: relative;
    z-index: 1;
    display: flex;
    margin: 5vh;
    /* border: 2px solid green; */
    height: 65vh;
  }

  .title {
    margin: 0 2vw;
    padding: 2vh 2vw;
    font-size: clamp(0.7rem, 8vw, 5rem);
    letter-spacing: 4px;
    text-transform: uppercase;
    border-radius: 25px;

    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .team-description {
    font-size: clamp(0.7rem, 1.5vw, 4rem);
    font-family: D-DIN-Regular;
    padding-top: 20px;
    padding-bottom: 20px;
    letter-spacing: 1px;
    line-height: 1.6;
    margin: 5vh 2vw;
    padding: 2vh 2vw;

    border-radius: 25px;

    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .subteam-grid {
    position: absolute;
    inset: 0;
    z-index: 2;

    padding-top: 35vh;
    padding-inline: 2rem;
    padding-bottom: 2rem;

    display: grid;
    /* grid-auto-flow: column;
    grid-template-rows: repeat(2, 1fr); */
    grid-template-columns: repeat(
      auto-fit,
      minmax(clamp(220px, 30vw, 420px), 1fr)
    );
    gap: 1rem;

    opacity: 0;
    visibility: hidden;
    transform: translateY(40px);
    will-change: transform, opacity;

    justify-items: center;
    align-items: center;

    /* border: 2px solid yellowgreen; */
  }
</style>
